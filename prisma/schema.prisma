// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

enum UserPerfil {
  NO
  SUPERVISAO
  ESTOQUE
  COMPRAS
  CONSULTORIA
  DIRETORIA
}

model UserRole {
  id     Int        @id @default(autoincrement())
  name   String
  perfil UserPerfil
  @@map("userRole")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  password           String
  image              String?
  accounts           Account[]
  sessions           Session[]
  Solicitacao        Solicitacao[]
  SolicitacaoInicial SolicitacaoInicial[]

  role UserPerfil @default(NO)
  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

model Unidade {
  id                 Int                  @id @default(autoincrement())
  name               String
  Solicitacao        Solicitacao[]
  SolicitacaoInicial SolicitacaoInicial[]
  SolicitacaoLio     SolicitacaoLio[]
  @@map("unidade")
}

model Categoria {
  id                      Int                       @id @default(autoincrement())
  name                    String
  produto                 Produto[]
  Solicitacao             Solicitacao[]
  SolicitacaoInicial      SolicitacaoInicial[]
  SolicitacaoLio          SolicitacaoLio[]
  categoriaOnSubCategoria CategoriaOnSubCategoria[]
  @@map("categoria")
}

model Marca {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  produto   Produto[]
  @@map("marca")
}

model Dioptria {
  id   String @id @default(cuid())
  name String
  @@map("dioptria")
}

model Cilindro {
  id   String @id @default(cuid())
  name String
  @@map("cilindro")
}

model Medico {
  id   String @id @default(cuid())
  name String
  @@map("medico")
}

model Produto {
  id                  Int                   @id @default(autoincrement())
  name                String?
  categoriaId         Int?
  marcaId             Int?
  dioptriaId          String?
  cilindroId          String?
  qtdeMin             Int?
  qtdeMax             Int?
  unidMedida          String?
  qtde                Int
  Categoria           Categoria?            @relation(fields: [categoriaId], references: [id], onUpdate: Cascade)
  Marca               Marca?                @relation(fields: [marcaId], references: [id], onUpdate: Cascade)
  Solicitacao         Solicitacao?          @relation(fields: [solicitacaoId], references: [id], onUpdate: Cascade)
  solicitacaoId       Int?
  ProdutosSolicitados ProdutosSolicitados[]
  SubCategoria        SubCategoria?         @relation(fields: [subCategoriaId], references: [id])
  subCategoriaId      Int?
  @@map("produto")
}

model SubCategoria {
  id                      Int                       @id @default(autoincrement())
  name                    String
  createdAt               DateTime?                 @default(now())
  updatedAt               DateTime?                 @updatedAt
  categoriaOnSubCategoria CategoriaOnSubCategoria[]
  produtos                Produto[]
  @@map("subCategoria")
}

model CategoriaOnSubCategoria {
  id             Int           @id @default(autoincrement())
  SubCategoria   SubCategoria? @relation(fields: [subCategoriaId], references: [id])
  subCategoriaId Int?
  Categoria      Categoria?    @relation(fields: [categoriaId], references: [id])
  categoriaId    Int?
  @@map("categoriaonsubcategoria")
}

model Solicitacao {
  id                  Int                   @id @default(autoincrement())
  name                String
  produtos            Produto[]
  categoria           Categoria             @relation(fields: [categoriaId], references: [id], onUpdate: Cascade)
  unidade             Unidade               @relation(fields: [unidadeId], references: [id], onUpdate: Cascade)
  usuario             User                  @relation(fields: [userId], references: [id], onUpdate: Cascade)
  resposta            String?
  status              String
  createdAt           DateTime?             @default(now())
  updatedAt           DateTime?             @updatedAt
  categoriaId         Int
  unidadeId           Int
  userId              String
  ProdutosSolicitados ProdutosSolicitados[]
  SolicitacaoInicial  SolicitacaoInicial[]
  @@map("solicitacao")
}

model ProdutosSolicitados {
  id            String      @id @default(cuid())
  produtos      Produto     @relation(fields: [produtoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  produtoId     Int
  qtdeLiberada       Int?
  solicitaco    Solicitacao @relation(fields: [solicitacaoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  solicitacaoId Int
  qtde          Int
  @@map("produtosSolicitados")
}

model SolicitacaoInicial {
  id Int @id @default(autoincrement())

  User             User?           @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId           String?
  Solicitacao      Solicitacao?    @relation(fields: [solicitacaoId], references: [id], onUpdate: Cascade)
  solicitacaoId    Int?
  SolicitacaoLio   SolicitacaoLio? @relation(fields: [solicitacaoLioId], references: [id], onUpdate: Cascade)
  solicitacaoLioId String?
  createdAt        DateTime?       @default(now())
  updatedAt        DateTime?       @updatedAt
  status           String          @default("Lio")
  Unidade          Unidade?        @relation(fields: [unidadeId], references: [id], onUpdate: Cascade)
  unidadeId        Int?
  Categoria        Categoria?      @relation(fields: [categoriaId], references: [id], onUpdate: Cascade)
  categoriaId      Int?
  @@map("solicitacaoInicial")
}

model SolicitacaoLio {
  id                 String               @id @default(cuid())
  paciente           String
  dtCirurgia         String
  lentePrincipal     String
  dioptria           String
  cilindro           String?
  lenteReserva       String?
  dioptriaReserva    String?
  cilindroReserva    String?
  medico             String
  unidade            Unidade              @relation(fields: [unidadeId], references: [id])
  solicitante        String
  injetorCartucho    String?
  dtPagamento        String
  comprovante        String?
  formCirurgico      String?
  resposta           String?
  status             String?
  SolicitacaoInicial SolicitacaoInicial[]

  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  Categoria   Categoria? @relation(fields: [categoriaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoriaId Int?
  unidadeId   Int
  @@map("solicitacaoLio")
}
