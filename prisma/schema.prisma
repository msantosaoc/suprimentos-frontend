// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  password           String
  image              String?
  accounts           Account[]
  sessions           Session[]
  Solicitacao        Solicitacao[]
  SolicitacaoInicial SolicitacaoInicial[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Unidade {
  id                 String               @id @default(cuid())
  name               String
  Solicitacao        Solicitacao[]
  SolicitacaoInicial SolicitacaoInicial[]
}

model Categoria {
  id                 String               @id @default(cuid())
  name               String
  produto            Produto[]
  Solicitacao        Solicitacao[]
  SolicitacaoInicial SolicitacaoInicial[]
  SolicitacaoLio     SolicitacaoLio[]
}

model Marca {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  produto   Produto[]
}

model Dioptria {
  id      String    @id @default(cuid())
  name    String
  produto Produto[]
}

model Cilindro {
  id      String    @id @default(cuid())
  name    String
  produto Produto[]
}

model Medico {
  id   String @id @default(cuid())
  name String
}

model Produto {
  id                  Int                @id @default(autoincrement())
  name                String?
  categoriaId         String?
  marcaId             Int?
  dioptriaId          String?
  cilindroId          String?
  qtdeMin             Int?
  qtdeMax             Int?
  unidMedida          String?
  qtde                Int
  Categoria           Categoria?            @relation(fields: [categoriaId], references: [id], onUpdate: Cascade)
  Marca               Marca?                @relation(fields: [marcaId], references: [id], onUpdate: Cascade)
  Dioptria            Dioptria?             @relation(fields: [dioptriaId], references: [id], onUpdate: Cascade)
  Cilindro            Cilindro?             @relation(fields: [cilindroId], references: [id], onUpdate: Cascade)
  Solicitacao         Solicitacao?          @relation(fields: [solicitacaoId], references: [id], onUpdate: Cascade)
  solicitacaoId       String?
  ProdutosSolicitados ProdutosSolicitados[]
}

model Solicitacao {
  id                  String                @id @default(cuid())
  name                String
  produtos            Produto[]
  categoria           Categoria             @relation(fields: [categoriaId], references: [id], onUpdate: Cascade)
  unidade             Unidade               @relation(fields: [unidadeId], references: [id], onUpdate: Cascade)
  usuario             User                  @relation(fields: [userId], references: [id], onUpdate: Cascade)
  resposta            String?
  status              String
  createdAt           DateTime?             @default(now())
  updatedAt           DateTime?             @updatedAt
  categoriaId         String
  unidadeId           String
  userId              String
  ProdutosSolicitados ProdutosSolicitados[]
  SolicitacaoInicial  SolicitacaoInicial[]
}

model ProdutosSolicitados {
  id            String      @id @default(cuid())
  produtos      Produto     @relation(fields: [produtoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  produtoId     Int
  produto       String?
  solicitaco    Solicitacao @relation(fields: [solicitacaoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  solicitacaoId String
  qtde          Int
}

model SolicitacaoInicial {
  id String @id @default(cuid())

  User             User?           @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId           String?
  Solicitacao      Solicitacao?    @relation(fields: [solicitacaoId], references: [id], onUpdate: Cascade)
  solicitacaoId    String?
  SolicitacaoLio   SolicitacaoLio? @relation(fields: [solicitacaoLioId], references: [id], onUpdate: Cascade)
  solicitacaoLioId String?
  createdAt        DateTime?       @default(now())
  updatedAt        DateTime?       @updatedAt
  status           String          @default("Lio")
  Unidade          Unidade?        @relation(fields: [unidadeId], references: [id], onUpdate: Cascade)
  unidadeId        String?
  Categoria        Categoria?      @relation(fields: [categoriaId], references: [id], onUpdate: Cascade)
  categoriaId      String?
}

model SolicitacaoLio {
  id                 String               @id @default(cuid())
  paciente           String
  dtCirurgia         String
  lentePrincipal     String
  dioptria           String
  cilindro           String
  lenteReserva       String?
  dioptriaReserva    String?
  cilindroReserva    String?
  medico             String
  unidade            String
  solicitante        String
  injetorCartucho    String?
  dtPagamento        String
  comprovante        String?
  formCirurgico      String?
  resposta           String?
  status             String?
  SolicitacaoInicial SolicitacaoInicial[]

  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  Categoria   Categoria? @relation(fields: [categoriaId], references: [id], onUpdate: Cascade)
  categoriaId String?
}
